@model JusTeeth.App.ViewModels.DetailedPlaceViewModel
@using System.Security.Cryptography

<div id="place-title">
    <h2>@Model.Name</h2>
    <h3>(aka. @Model.AlternativeName)</h3>
</div>

<div class="row">
    <div class="span3">
        <div>
            @Html.DisplayNameFor(model => model.Address):
            <strong>
                @Html.DisplayFor(model => model.Address)
            </strong>
        </div>

        <div>
            @Html.DisplayNameFor(model => model.Description):
            <strong>
                @Html.DisplayFor(model => model.Description)
            </strong>
        </div>

        <div>
            @Html.DisplayNameFor(model => model.MonthRating):
            <strong>
                @Html.DisplayFor(model => model.MonthRating)
            </strong>
        </div>

        <div>
            @Html.DisplayNameFor(model => model.Rating):
            <strong>
                @Html.DisplayFor(model => model.Rating)
            </strong>
        </div>
    </div>
    <div class="span5">
        <div id="pie-charts">
            <div id="place-eatingtime-container">
                @(Html.Kendo().Chart()
                      .Name("placeEatTimeChart")
                      .Title(title => title
                          .Text("How fast we are going to eat?")
                          .Position(ChartTitlePosition.Bottom))
                      .Legend(legend => legend.Visible(true)
                      )
                      .Series(series =>
                      {
                          series.Pie(new dynamic[] {
                              new { @*category = @Model.EatTime,*@ value = @Model.EatPiePercent, color = @Model.EatColor},
                              new { value=@Model.EatRemainingPercent, color="grey"},
                          })
                              .Padding(0)
                              .Labels(labels => labels.Visible(false))
                              .StartAngle(90);
                      }))
            </div>
            <div id="place-price-container">
                @(Html.Kendo().Chart()
                      .Name("placePriceChart")
                      .Title(title => title
                          .Text("How much money we are going to spend?")
                          .Position(ChartTitlePosition.Bottom))
                      .Legend(legend => legend.Visible(true))
                      .Series(series =>
                      {
                          series.Pie(new dynamic[] {
                              new { @*category = @Model.EatTime,*@ value = @Model.PricePiePercent, color = @Model.PriceColor},
                              new { value=@Model.PriceRemainingPercent, color="grey"},
                          })
                              .Padding(0)
                              .Labels(labels => labels.Visible(false))
                              .StartAngle(90);
                      })
                      )

            </div>
        </div>
    </div>
    <div class="span4">
        <div id="location-map"></div>
    </div>
</div>

@*    <div class="row-fluid">*@
@*        @(Html.Kendo().ListView<JusTeeth.App.ViewModels.HungryUserViewModel>(Model.Users)*@
@*              .Name("usersListView")*@
@*              .TagName("div")*@
@*              .ClientTemplateId("template")*@
@*        )*@
@*    </div>*@

@Html.ActionLink("Back to List", "Index")
@section Scripts {
    <script type="text/javascript"
            src="http://maps.google.com/maps/api/js?sensor=false">
    </script>
}
<script>
    function initialize() {
        var placeName = '@(Model.Name)';
        var latitude = '@(Model.Latitude)';
        var longitude = '@(Model.Longitude)';

        var latLng = new google.maps.LatLng(latitude, longitude);
        var options = {
            zoom: 14,
            center: latLng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("location-map"), options);
        var marker = new google.maps.Marker({
            position: latLng,
            map: map,
            title: placeName
        });

//        var loc = {};
//        var geocoder = new google.maps.Geocoder();
//        if (google.loader.ClientLocation) {
//            loc.latitude = google.loader.ClientLocation.latitude;
//            loc.longitude = google.loader.ClientLocation.longitude;
//
//            var currentLatLng = new google.maps.LatLng(loc.latitude, loc.longitude);
//
//            geocoder.geocode({ "currentLatLng": currentLatLng }, function(results, status) {
//                if (status == google.map.GeocoderStatus.OK) {
//                    var currentPositionMarker = new google.maps.Marker({
//                        position: currentLatLng,
//                        map: map,
//                        title: "Current position"
//                    });
//                }
//            });
//            
//        }
    }

    $(function() {
        var containerWidth = $("#location-map").width();
        var containerHeight = $("#location-map").height();
        $("#location-map").css("width", containerWidth + "px");
        $("#location-map").css("height", "300" + "px");

        initialize();
    });
</script>